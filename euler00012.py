#python programing questions No.12
#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle numer would be
# 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28
#The first ten terms would be:
# 1 ,3, 6, 10, 15, 21, 28, 36, 45, 55 ....
#let us list the factors of the first seven triangle numbers:
#1: 1
#3: 1, 3
#6: 1, 2, 3, 6
#10: 1, 2, 5, 10
#15: 1, 3, 5, 15
#21: 1, 3, 7, 21
#28: 1, 2, 4, 7, 14, 28
#we can see that 28 is the first triangle number to have over five divisors.
#what is the value of the first triangle number to have over !five hundred! divisors?

#version 0.1

def makeTrian(input0):
    trian =0; divider =1; temp0 =0; listOfD =[]; sum0 =0; number =7

    trian = number*(number+ 1)/2

    while True:
        temp0 =trian %divider #test if trian can be divided in to int
        print ('The remainder is: '+str(temp0))
        print ('The trian is: '+str(trian))
        print ('The divider is :'+str(divider))

        if temp0 ==0:
            print('append')
            listOfD.append(divider)
            print(listOfD)
        if temp0 !=0:
            print('do nothing to list, increase divider')
        if divider == trian and len(listOfD) < input0+1:
            print('Trian need increase--')
            number =number +1
            divider =0
            print('divider reset')
            trian = number*(number+ 1)/2
            listOfD =[]
            print('list reset')
	        #break


        if len(listOfD)==input0+1:
        	return listOfD
        	break

        divider =divider +1 #increase divider
        print(listOfD)
'''----------------------------------------------------------'''



finalList =makeTrian(6)
print(finalList[len(finalList) -1])


